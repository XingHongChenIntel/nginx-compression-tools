user  root;
worker_processes  4;
worker_cpu_affinity auto;
daemon on;

load_module modules/ngx_ssl_engine_qat_module.so;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log notice;

#pid        logs/nginx.pid;


ssl_engine {        # This directive enables the use of QAT offload.  If "ssl_engine" is ommitted, then software will be used
    use_engine qatengine;
    default_algorithms ALL;
    qat_engine {
        qat_notify_mode poll;
        qat_offload_mode async;
#    	qat_poll_mode heuristic;

#       qat_poll_mode external;
#       qat_external_poll_interval 1;

        qat_poll_mode internal;
        qat_internal_poll_interval 10000;
}}

worker_rlimit_nofile 1000000;  # Set this to a high number, as this is an OS optimization that will ensure no file handle issues.

events 
{
    use epoll;   # The epoll module is important for performance.  It sets the behavior to poll on events coming from IO
    worker_connections  8192;  
    multi_accept on; # This directive allows worker_processes to hangle multiple connection requests at a time rather than dealing with only one
    accept_mutex on; # This directive tells the work_proceses to get in line rather than all rush for a new connection.
}


http {
    ssl_buffer_size 65536;   #This is telling nginx to use 64KB buffers when dealing with TLS records

    include       mime.types;
    default_type  application/octet-stream;
    sendfile on;   #An optimization that allows for file data to transfer within the kernel from file descriptor to file descriptor rather than leaving the kernel, heading to user space and then  back into kernel space.
    access_log off;   #Turns off loggin, which consequently reduces operation latency to some degree.
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    ssl_asynch on;
    ##gzip  on;

    #server {
    #    listen       80;
    #    server_name  localhost;

    #    #charset koi8-r;

    #    #access_log  logs/host.access.log  main;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }

    #    #error_page  404              /404.html;

    #    # redirect server error pages to the static page /50x.html
    #    #
    #    error_page   500 502 503 504  /50x.html;
    #    location = /50x.html {
    #        root   html;
    #    }

    #    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #    #
    #    #location ~ \.php$ {
    #    #    proxy_pass   http://127.0.0.1;
    #    #}

    #    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #    #
    #    #location ~ \.php$ {
    #    #    root           html;
    #    #    fastcgi_pass   127.0.0.1:9000;
    #    #    fastcgi_index  index.php;
    #    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    #    include        fastcgi_params;
    #    #}

    #    # deny access to .htaccess files, if Apache's document root
    #    # concurs with nginx's one
    #    #
    #    #location ~ /\.ht {
    #    #    deny  all;
    #    #}
    #}

    server # Here is your main server block that all IP specific directives and behaviors. This will need to be duplicated for each IP that is used
    {
        listen       4433 reuseport backlog=131072 so_keepalive=on ssl; # Reuseport will provide the kernel behavior of load balancing incoming connections to the available NGINX socket listeners. There is an NGINX socket listener per server block, the block we are currently in,now. The backlog parameter tells NGINX how many connections can be in a wait queue when it cannot service the connection immeditatly.
	sendfile on;    # Though already provided in a parent block, continue to specify it.

	keepalive_timeout 10000s; # Even though TCP keepalives are disabled, we still set it to a value of 0
	tcp_nopush on;  # This directive tells NGINX to wait to send data once it has a payload the size of MSS

    tcp_nodelay on; # This works opposite of tcp_nopush, where here we do not delay when sending data. We set this to ensure packets get sent without delaying  for some perious of time. This is to reduce latency.
   	ssl_verify_client off; # Here we do not verify client certificates
    ssl_early_data         on; #test for early data
	ssl_session_tickets off;   # We do not cache ssl session information to ensure freshness of connections.
    access_log off; # Turn off access log to reduce latency and overhead
	lingering_close off; # We immediatly close the TCP connection without waiting.
	lingering_time 1; # We still set this even though we disabled lingering delay.
	server_name server_1; # Name of the server.

	ssl_asynch		on;  # Ensure SSL works asyncronously 
	ssl_certificate 	cert.pem; # Path to your public certificate for RSA. For EC use cert.pem instead of server.crt
	ssl_certificate_key	server_ecc.pem; # Path to your private key for RSA.  For EC use key.pem instead of server.key

	ssl_session_timeout 	300s; # Even though we disable ssl session caching, we set a timeout for 300 seconds to preserve current productive sessions doing work.

	#ssl_protocols  TLSv1.2;  # We use TLSv1.2
	ssl_protocols  TLSv1.3;

	#ssl_ciphers  AES128-SHA:AES256-SHA; # We specify the cipher to use. AES128-SHA, AES128-FCM-SHA256, ECDHE-ECDSA-AES128-SHA, and ECDHE-RSA=AES128-SHA are the ciphers currently used.
    #ssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256;
    #ssl_prefer_server_ciphers on;  # During SSL handshake we use this to ensure server ciphers have precendence.

	location /  # Location of files to send.  This location is relative to /usr/local/nginx/html
        {
		root 	html;
		index    index.html big_html.html test.html;
        }

        location /204 { return 204; }
        location /444 { return 444; }
    } 
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_protocols       TLSv1.2;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
