user  root;
worker_processes  1;
# daemon off;
# worker_cpu_affinity auto;
# error_log  logs/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;

# load_module modules/ngx_http_qatzip_filter_module.so;
worker_rlimit_nofile 1000000;
master_process on;

events {
    use epoll;
    worker_connections  102400; #This directive tells how many connections a worker_process can have.  Ensure to never set this too low or high. To low will prevent getting good performance, and too high may CPU starve connections.
    multi_accept on;  #This directive allows worker_processes to handle multiple connections at a time rather than dealing with only one at a time.
    accept_mutex off;  #This directive tells the worker_processes to get in a line rather than all rush for a new connection.
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log      off;
    sendfile        on;
    sendfile_max_chunk 512k;
    # directio 1k;
    # aio on;
    tcp_nopush      on;
    tcp_nodelay on; # This works opposite of tcp_nopush, where here we do not delay when sending data. We set this to ensure packets get sent without delaying  for some perious of time. This is to reduce latency.

    lingering_close off; # We immediatly close the TCP connection without waiting.
    lingering_time 1; # We still set this even though we disabled lingering delay.

    open_file_cache max=1024000 inactive=60s;
    open_file_cache_valid 80s;
    open_file_cache_min_uses 1;

    keepalive_timeout  10000s;
    keepalive_requests 1000000;

    # client_body_buffer_size  128k;#处理客户端缓冲区大小。 大多数客户端缓冲区都来自POST方法表单提交。128k通常是此设置的不错选择。
    # client_max_body_size  10m;#置最大body缓冲区大小。如果请求中的大小超过配置的值，则会将413（请求实体过大）错误返回给客户端。 不过浏览器无法正确显示413错误。 将大小设置为0将禁用对客户机请求正文大小的检查
    # client_header_buffer_size    1k; #处理客户端头大小。 默认情况下，1k通常是一个合理的选择。
    # large_client_header_buffers  4 4k; #设置客户端头的缓冲区的最大数量和大小。 4个报头与4k缓冲区应该足够了。
    # output_buffers  16 8k;#置用于从磁盘读取响应的缓冲区的数量和大小。 如果可能，客户端数据的传输将被推迟，直到Nginx至少具有要发送的数据的字节数的集合大小。零值禁止推迟数据传输。
    # postpone_output  1460;#指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值

    server {
        listen       8081 reuseport so_keepalive=on; # Reuseport will provide the kernel behavior of load balancing incoming connections to the available NGINX socket listeners. There is an NGINX socket listener per server block, the block we are currently in,now. The backlog parameter tells NGINX how many connections can be in a wait queue when it cannot service the connection immeditatly.
        server_name localhost; # Name of the server.

        location / {
            root   html;
            index  index.html;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}